package ebay.controllers;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Map;
import java.util.Set;

import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import ebay.dao.EmployeeDataDao;
import ebay.dao.EmployeeDataDaoImpl;
import ebay.data.Employee;
import ebay.data.Participant;
import ebay.utilities.ExcelReader;

@RestController
public class ExcelDataController {
	
	
	private EmployeeDataDao employeeDataDao;
	    
    @RequestMapping(method = RequestMethod.GET, value = "/employee")
    public Employee greeting(@RequestParam(value="name", required=false, defaultValue="World") String name) {
    	Employee emp = null;
    	employeeDataDao = new EmployeeDataDaoImpl();
		try {
			emp = employeeDataDao.getEmployee();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return emp;
    }
    
    @RequestMapping(value="/upload", method=RequestMethod.POST)
    public @ResponseBody String handleFileUpload(@RequestParam("name") String name,
            @RequestParam("file") MultipartFile file){
        if (!file.isEmpty()) {
            try {
            	
            	XSSFWorkbook book = new XSSFWorkbook(file.getInputStream());
//                byte[] bytes = file.getBytes();
//                BufferedOutputStream stream =
//                        new BufferedOutputStream(new FileOutputStream(new File(name + "-uploaded")));
//                stream.write(bytes);
//                stream.close();
            	ExcelReader reader = new ExcelReader();
            	Map<String, Object> resultMap = reader.readEventData(book);
            	Map<String, Participant> pMap = (Map<String, Participant>) resultMap.get("participant");
        		Set<String> locationSet = (Set<String>) resultMap.get("location");
        		
        		if(pMap != null && locationSet != null){
        			
        		}
                return "You successfully uploaded " + name + " into " + name + "-uploaded !";
            } catch (Exception e) {
                return "You failed to upload " + name + " => " + e.getMessage();
            }
        } else {
            return "You failed to upload " + name + " because the file was empty.";
        }
    }
    
}